From nobody Tue Dec 24 13:57:38 2024
Authentication-Results: mail-a.sr.ht; dkim=permerror header.d=aol.com header.i=@aol.com
Received: from sonic315-21.consmr.mail.ne1.yahoo.com (sonic315-21.consmr.mail.ne1.yahoo.com [66.163.190.147])
	by mail-a.sr.ht (Postfix) with ESMTPS id 8A649202B8
	for <~exec64/imv-devel@lists.sr.ht>; Sun, 26 May 2024 01:46:57 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=aol.com; s=a2048; t=1716688016; bh=JZeQ7OtP49lAJBsfoXOTOOWUrOSJGhMe9E4NPDnMJcE=; h=From:To:Cc:Subject:Date:In-Reply-To:References:From:Subject:Reply-To; b=lKoWf+/fuyctytG6MpqRhES4/WF7nHEuYQBg8/ChcrC6qMblOyFL/X7oYmyvpmGKswUISsLROMKiCjY/Pd9I7I9y5Dcw0w3qJ8HnyQfGMQi2lWpxQVgbPB35O/FQEfP58P8QL86qvdM/jyYzG5TVutRLq+w9K4N2RbNSO75wObUSXdmHHpCGe9zArEm2J3h2gQeQm4Xm6+oqONr/vwBlGEfK8FLx199SQEa+KbJCZrPKz7djdk5ya3rQOkETWZzLhod9hTJsemUTIT2Tw6Q68EsTtwc4ZLDie0y+BWhFpkBmLaSDyFcZkiSNmvqN2QOJq6Iky3tAH69aaZsrIwoeyw==
X-SONIC-DKIM-SIGN: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoo.com; s=s2048; t=1716688016; bh=zOhfO/QI8IcYNv2AIr4vLH5mhf3hXHpnEYuZlQdZo2e=; h=X-Sonic-MF:From:To:Subject:Date:From:Subject; b=pDDFOmmHxB3whc1pYNY/ViKsWmsk5bFi0C1NWllCJhYMrVaJkQxQsY4nGUvLzoDTp/rBhSyN0kQ4RL8IU6O9KmP8q5zmrmAk9Hkcl5PaycJvABhe/06Bc0zIMe83KPAy3BOvdbPk9iQYCcR2HqY3pvwY4yc4QlYYnVuMD4hKsui6UIuQCCveK2r6Nkime9zeuIaVFWNQPBlvsAw3seP9z7XWqeAbYzIKKh8u7BeBdn1w1zzcvMwdxKGBLqJdGpM2jPtO/VZqSExmMUwKk4Zb8YU/HYf7tgi4vRPBrOajSO7KK34aikaylnNuICjdB4w+np8tco58kTMDdZS7ap79Bw==
X-YMail-OSG: jOR6JmIVM1k2_WXT9QSwtFx2HnYX0XHJW5Y1mkF5TeqdtlNfqJsoHLHYnPgIXAU
 MVsFsRw2D.Im_iXrBS.dBBQsfNkKVy0db9vP4aj6.KutQ4wCV6fXL7KX9ieGQd9SDgn2_0K6VWKW
 Nmzyg9cROjmMPBgiiqBgkkXPKcHHiF0_KnJgn1u6xD1J9gO3LlipoX0xFWc94jeMT7Kcclr72bC.
 .AK9tFv52QDE1Uz9Nahkr8q1P_WqykL355vYttoLKC0Q3bm9KTN8qU8dm_22wnNx1lA4JHneH.jJ
 cot9Luao.E6yBCmYE._i7Y6Tze1PRsxn90N7aShD0WO0AESlNkLp4Lz8ssPx4LDPyAFbrpshZNs_
 TJHH.Q55EABOq8ljZN2r3CmzQbJGH06lfptSbx_5EJUdWEY8xe8EsQ8HPLIuc98UN6_ru..0x4w3
 PF_zjV_3CD21I2Zl7.wKnLDrBqboFvZ3D2ggybsOAx8MY4OJVcVy_dSbhsSGkSEZ4AVYS9LZzE8K
 ZhNABAKwuTSp3mi1.p96gRCPbU4vVESncMD1Y03RYLv.LMNDA6KneSWXPff91TOZgmsKzHaMo2WF
 LM6IeGHSOboiiqpNPkzm9VnBu7Ln1dBhv0C_zkWkUy4jQ_gB7r1V2wR8KYfLI27hUHpAQ8G9x25.
 j7yAaqHEMI0URUW0QcQkSrPtKpJg8EpMJkCMzd3QfYZ48MApK2yOUMDHof1bWxFDR5CPZSkRR0oj
 lV0Du1H3rbHJ_3z6KbMnDQmNjWOkounVsSZ4YBex23TEFQ34SmJ0cUYrhJbWaGywVi6BtQk1mHHU
 3TCTjkpx8iX8kVbH0TNt6VVF2qAH9P.yWRwOSQvXMmblkvnVGc0XHj.6l5Yk38Wx9BHoCgaCCJAh
 Z7OkwW.fc0Qhs0EnNOi4PI2OsijqshQEFm.2u1NGBTrhkAXgpjnHQZlS9TkWyrbHerZWl1xkFxoL
 8ygz5thUWZpVq84NImBq5.knEWwPD4Llg6EKV8dv9Ta8duldL0n9Rk6qE4cSL2SrjbBgmoYR5ODN
 BEUQPyBMb41YnbpWMXMua7s5087N.dgoQDz8sXMKSqtg3qOQaNG4Mav6gH_V30h9zSfIgEN7OcHI
 QpVhK7GNu7uv_Jz9xJo1z1A1i0b9.F11Q7PGn657f_oFpspkkn5soDk3Ln_PV.OTESnm5lCgkKQo
 vBsQtWYnBgk64i9ip6FAsC_auar1j7lgEbfMO_2BVEoAVB6GBxtynNnrCajJKaiSqbkaQ22gv.b9
 OwBirozO_8DZRKGjmxhaQEw45e0r5UEs_hyG51e0QN_OspQCm4fc7guBPJL2DlKDNX2VNi7L05Yu
 1T6Xtbm23kkAXOXe5tAmqqm_W7tP1l9c4GEKmyBHdjUrTsVqVF2dKW2QVfXFILqWKVG1_YqJhBfe
 SNrZjJWc1lAJjdlVP13wE7_7Bc0KQpOIbLUEMN1bWujwyubp8DN1lEHCRIMSco6SSUsSbp0y15oa
 wjZJzUBUl.t4apKDFVtrVmOvU0lhOf_r.OhTcpwowZGLs5k74FunlgTlYC3gkr_NUYBHsIfV.Tft
 PToBElyiDAMjzTO9lpl_PJn2K27HbenazfR4aXejJU8q7t3.TSliyEvoFgR5MdVtZlLzIIMh33m_
 6kVLpaEGjfcj13Qi2qrXfEDCcd1BsZjarln77fF63xSHotueExhdMtNLj2IzoSrzO5n8q4rg5gl0
 e99UqAKLvaxOPG9yWp8Mc8E8te1TFOlYysObhCOp2uFkxL3FvF9YixtIMQVuJofzfBNHMxSwyO0v
 9UvmLYxKcGdCyhO4wqfpbnmQbxml915w4R1LGRlpiShgNCQBFQSaNSHAdrcCGzFWLJMR5Q7QTuXD
 e5v4gdRPY4oSZ__BtltHeuYnTR7810_L0GXpMXx0hQwQWfLDbpoowlOIOqVEMDaV1I8Ly6ARcNCM
 TBnj8Z_A7lqaidWX.U1sUTxWvD12JH86LSaA9W7Lyro0.H2DHB53PLIEET4NuAHTVECMtXi2FVPs
 2Wrq_Dhpf926g30AFfvZdXgZiCPN5Pqvc2Arn0gk3T4vl8YZPBdC.7yGDGKi4Z19SEU6Bcprtxyd
 Zot51KYzIxwMFDCL9BculBpqpRz_F3qjvH6vq3qUFZJVvN6M78a6jbUGvpdhkivm2aJ7H.D1bYGX
 D84UZN1srg8uKksACNh6pGUMw.drL7fUlJjF7qkRDSe_imj8_l8HCbnpZ2QxXCnbR3xqrex1ZFaY
 N8_arHDEsRxRNry2m.2qJNtMtrIhqzlIg
X-Sonic-MF: <scott092707@aol.com>
X-Sonic-ID: e2ede65d-2ec7-4ba1-9642-fd4b1699cb99
Received: from sonic.gate.mail.ne1.yahoo.com by sonic315.consmr.mail.ne1.yahoo.com with HTTP; Sun, 26 May 2024 01:46:56 +0000
Received: by hermes--production-ne1-6488576888-7v9sx (Yahoo Inc. Hermes SMTP Server) with ESMTPA ID 860a46e28d4e7f1b6a327d6ca38e2e78;
          Sun, 26 May 2024 01:46:53 +0000 (UTC)
From: Scott Jacobs <scott092707@aol.com>
To: ~exec64/imv-devel@lists.sr.ht
Cc: Scott Jacobs <scott092707@aol.com>
Subject: [PATCH] Handle large images by using multiple OpenGL textures
Date: Sat, 25 May 2024 21:45:11 -0400
Message-ID: <20240526014623.1273866-2-scott092707@aol.com>
X-Mailer: git-send-email 2.43.0
In-Reply-To: <20240526014623.1273866-1-scott092707@aol.com>
References: <20240526014623.1273866-1-scott092707@aol.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit

---
 src/canvas.c | 223 ++++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 178 insertions(+), 45 deletions(-)

diff --git a/src/canvas.c b/src/canvas.c
index 1e95299..2a129a7 100644
--- a/src/canvas.c
+++ b/src/canvas.c
@@ -22,6 +22,8 @@
 unsigned char checkers_data[] = { REPEAT8(REPEAT8(0xCC, 0xCC, 0xCC, 0xFF), REPEAT8(0x80, 0x80, 0x80, 0xFF)),
                                   REPEAT8(REPEAT8(0x80, 0x80, 0x80, 0xFF), REPEAT8(0xCC, 0xCC, 0xCC, 0xFF)) };
 
+GLenum errCode;
+
 struct imv_canvas {
   cairo_surface_t *surface;
   cairo_t *cairo;
@@ -31,7 +33,8 @@ struct imv_canvas {
   int height;
   struct {
     struct imv_bitmap *bitmap;
-    GLuint texture;
+    GLuint *textures;
+    GLsizei texture_count;
   } cache;
   GLuint checkers_texture;
 };
@@ -83,8 +86,11 @@ void imv_canvas_free(struct imv_canvas *canvas)
   cairo_surface_destroy(canvas->surface);
   canvas->surface = NULL;
   glDeleteTextures(1, &canvas->texture);
-  if (canvas->cache.texture) {
-    glDeleteTextures(1, &canvas->cache.texture);
+  if (canvas->cache.textures) {
+    glDeleteTextures(canvas->cache.texture_count, canvas->cache.textures);
+    free(canvas->cache.textures);
+    canvas->cache.textures = NULL;
+    canvas->cache.texture_count = 0;
   }
   glDeleteTextures(1, &canvas->checkers_texture);
   free(canvas);
@@ -273,44 +279,16 @@ static void draw_bitmap(struct imv_canvas *canvas,
                         enum upscaling_method upscaling_method,
                         bool cache_invalidated)
 {
-  GLint viewport[4];
-  glGetIntegerv(GL_VIEWPORT, viewport);
-
-  glPushMatrix();
-  glOrtho(0.0, viewport[2], viewport[3], 0.0, 0.0, 10.0);
-
-  if (!canvas->cache.texture) {
-    glGenTextures(1, &canvas->cache.texture);
-  }
-
-  const int format = convert_pixelformat(bitmap->format);
-
-  glBindTexture(GL_TEXTURE_RECTANGLE, canvas->cache.texture);
-
   GLint upscaling = 0;
   if (upscaling_method == UPSCALING_LINEAR) {
-    upscaling = GL_LINEAR;
+      upscaling = GL_LINEAR;
   } else if (upscaling_method == UPSCALING_NEAREST_NEIGHBOUR) {
-    upscaling = GL_NEAREST;
+      upscaling = GL_NEAREST;
   } else {
     imv_log(IMV_ERROR, "Unknown upscaling method: %d\n", upscaling_method);
     abort();
   }
 
-  if (canvas->cache.bitmap != bitmap || cache_invalidated) {
-    glTexParameteri(GL_TEXTURE_RECTANGLE, GL_TEXTURE_MIN_FILTER, upscaling);
-    glTexParameteri(GL_TEXTURE_RECTANGLE, GL_TEXTURE_MAG_FILTER, upscaling);
-    glPixelStorei(GL_UNPACK_ROW_LENGTH, bitmap->width);
-    glPixelStorei(GL_UNPACK_SKIP_ROWS, 0);
-    glPixelStorei(GL_UNPACK_SKIP_PIXELS, 0);
-    glTexImage2D(GL_TEXTURE_RECTANGLE, 0, GL_RGBA8, bitmap->width, bitmap->height,
-        0, format, GL_UNSIGNED_INT_8_8_8_8_REV, bitmap->data);
-  }
-  canvas->cache.bitmap = bitmap;
-
-  glEnable(GL_TEXTURE_RECTANGLE);
-
-  glTexParameteri(GL_TEXTURE_RECTANGLE, GL_TEXTURE_MAG_FILTER, upscaling);
 
   const int left = bx;
   const int top = by;
@@ -319,6 +297,85 @@ static void draw_bitmap(struct imv_canvas *canvas,
   const int center_x = left + bitmap->width * scale / 2;
   const int center_y = top + bitmap->height * scale / 2;
 
+// Based on the maximum texture size, and the size of the bitmap's width/height
+// calculate the number of textures we'll need to cover the bitmap.
+// Divide the texture rectangle up into equal pieces, to avoid slivers.
+
+  GLint t_left, t_top, t_right, t_bottom, t_w, t_h, tc_w, tc_w_m1, tc_h, tc_h_m1, tc, tw, th, tw_plus, th_plus;
+  GLint v_left, v_top, v_right, v_bottom, v_w, v_h, vw, vh, vw_plus, vh_plus;
+
+  GLint MTS;
+  glGetIntegerv(GL_MAX_TEXTURE_SIZE, &MTS);
+
+  t_left = 0;
+  t_top = 0;
+  t_right = bitmap->width;
+  t_bottom = bitmap->height;
+
+  t_w = t_right  - t_left;   // full width needed to cover entire image
+  t_h = t_bottom - t_top;    // full height needed to cover entire image
+  tc_w = (t_w / MTS) + 1;  // number of textures across
+  tc_w_m1 = tc_w - 1;
+  tc_h = (t_h / MTS) + 1;  // number of textures down
+  tc_h_m1 = tc_h - 1;
+  tc = tc_w * tc_h;  // total number of textures needed.
+  tw = t_w / tc_w;  // equalize width of each texture, so no slivers
+  th = t_h / tc_h;  // equalize height of each texture
+  tw_plus = t_w % tc_w;  // make rightmost textures this much wider to reach full width
+  th_plus = t_h % tc_h;  // make bottommost textures this much taller to reach full height
+
+// Divide the original vertex rectangle up into the same number of pieces
+// as the texture coordinate section
+  v_left = left;
+  v_top = top;
+  v_right = right;
+  v_bottom = bottom;
+
+  v_w = v_right  - v_left;  // full width needed to cover original vertex rectangle
+  v_h = v_bottom - v_top;    // full height needed to cover original vertex rectangle
+  vw = v_w / tc_w;  // width of each vertex rectangle
+  vh = v_h / tc_h;  // height of each vertex rectangle
+  vw_plus = v_w % tc_w;   // make rightmost vertex rectangle this much wider to reach full width
+  vh_plus = v_h % tc_h;   // make bottommost vertex rectangle this much taller to reach full height
+
+
+  GLint viewport[4];
+  glGetIntegerv(GL_VIEWPORT, viewport);
+
+  glPushMatrix();
+  glOrtho(0.0, viewport[2], viewport[3], 0.0, 0.0, 10.0);
+
+// if this is a new image, then we need to get rid of the old texture[s]
+  if (canvas->cache.bitmap != bitmap || cache_invalidated) {
+    if (canvas->cache.textures) {
+      glDeleteTextures(canvas->cache.texture_count, canvas->cache.textures);
+      free(canvas->cache.textures);
+      canvas->cache.textures = NULL;
+      canvas->cache.texture_count = 0;
+    }
+    canvas->cache.texture_count = tc;
+    canvas->cache.textures = calloc(canvas->cache.texture_count, sizeof(GLuint));
+    glGenTextures(canvas->cache.texture_count, canvas->cache.textures);
+  }
+
+ const int format = convert_pixelformat(bitmap->format);
+
+
+// Determine the left/top/right/bottom coordinates of each texture,
+// and its corresponding vertex rectangle
+
+// AND we need to add one to non-boundary texture width/height, and vertex vr/vb
+// or we will have thin (pixel-sized?) black lines between the textures
+
+  int i, j, tx, tt, vt, tl, vl, tr, tb, vr, vb;
+// The next variables will mostly be the same as the corresponding non-'1'
+// variables, except for the rightmost/bottommost textures
+  int tw1, th1;
+
+  glEnable(GL_TEXTURE_RECTANGLE);
+  glEnable(GL_BLEND);
+  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+
   glTranslated(center_x, center_y, 0);
   if (mirrored) {
     glScaled(-1, 1, 1);
@@ -326,23 +383,99 @@ static void draw_bitmap(struct imv_canvas *canvas,
   glRotated(rotation, 0, 0, 1);
   glTranslated(-center_x, -center_y, 0);
 
-  glEnable(GL_BLEND);
-  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+tx = 0;
+tt = t_top; vt = v_top;
+for (i = 0; i < tc_h; i++) {  // textures down
+  tl = t_left; vl = v_left;
+  tr = tl + tw - 1; vr = vl + vw - 1;
+
+  tb = tt + th - 1; vb = vt + vh - 1;
+  for (j = 0; j < tc_w; j++) {  // textures across
+    if ( i == tc_h_m1 ) {
+      tb += th_plus;
+      vb += vh_plus;
+      th1 = tb-tt;
+    } else
+    {
+      th1 = tb-tt+1;  // on non-boundary tex. add one more pixel to height
+                      // (and add one pixel to vertex's vb, below)
+    }
+    if ( j == tc_w_m1 ) {
+      tr += tw_plus;
+      vr += vw_plus;
+      tw1 = tr-tl;
+    } else
+    {
+      tw1 = tr-tl+1;  // on non-boundary tex. add one more pixel to width
+                      // (and add one pixel to vertex's vr, below)
+    }
 
-  glBegin(GL_TRIANGLE_FAN);
-  glTexCoord2i(0,             0);              glVertex2i(left, top);
-  glTexCoord2i(bitmap->width, 0);              glVertex2i(right, top);
-  glTexCoord2i(bitmap->width, bitmap->height); glVertex2i(right, bottom);
-  glTexCoord2i(0,             bitmap->height); glVertex2i(left, bottom);
-  glEnd();
+    glBindTexture(GL_TEXTURE_RECTANGLE, canvas->cache.textures[tx]);
 
-  glDisable(GL_BLEND);
+    if (canvas->cache.bitmap != bitmap || cache_invalidated) {
+      glTexParameteri(GL_TEXTURE_RECTANGLE, GL_TEXTURE_MIN_FILTER, upscaling);
+      glTexParameteri(GL_TEXTURE_RECTANGLE, GL_TEXTURE_MAG_FILTER, upscaling);
+// The following two lines may not be necessary - they were added to try to
+// eliminate the thin lines between textures.  Alone, they did NOT do so.
+      glTexParameteri(GL_TEXTURE_RECTANGLE, GL_TEXTURE_WRAP_S, GL_MIRROR_CLAMP_TO_EDGE);
+      glTexParameteri(GL_TEXTURE_RECTANGLE, GL_TEXTURE_WRAP_T, GL_MIRROR_CLAMP_TO_EDGE);
 
-  glBindTexture(GL_TEXTURE_RECTANGLE, 0);
-  glDisable(GL_TEXTURE_RECTANGLE);
-  glPopMatrix();
+      glPixelStorei(GL_UNPACK_ROW_LENGTH, bitmap->width);    // This still needs to be the full bitmap width
+      glPixelStorei(GL_UNPACK_SKIP_ROWS, tt);
+      glPixelStorei(GL_UNPACK_SKIP_PIXELS, tl);
+
+      glTexImage2D(GL_TEXTURE_RECTANGLE, 0, GL_RGBA8, tw1, th1,
+        0, format, GL_UNSIGNED_INT_8_8_8_8_REV, bitmap->data);
+    }
+
+
+//  Why are we doing the following again...?
+//  The original code did so, so I left it in...
+    glTexParameteri(GL_TEXTURE_RECTANGLE, GL_TEXTURE_MAG_FILTER, upscaling);
+
+
+    glBegin(GL_TRIANGLE_FAN);
+
+// Left, Top
+    glTexCoord2i(0, 0);
+                        glVertex2i(vl, vt);
+
+// Right, Top
+    glTexCoord2i(tw1, 0);
+                        glVertex2i(vr+1, vt);
+
+// Right, Bottom
+    glTexCoord2i(tw1, th1);
+                        glVertex2i(vr+1, vb+1);
+
+// Left, Bottom
+    glTexCoord2i(0, th1);
+                        glVertex2i(vl, vb+1);
+
+    glEnd();
+    glBindTexture(GL_TEXTURE_RECTANGLE, 0);
+
+
+    tl += tw; vl += vw;
+    tr += tw; vr += vw;
+
+    tx++;
+  }  // for (j = ...
+
+  tt += th; vt += vh;
+}  // for (i = ...
+
+glDisable(GL_BLEND);
+glDisable(GL_TEXTURE_RECTANGLE);
+
+
+
+canvas->cache.bitmap = bitmap;
+
+glPopMatrix();
 }
 
+
 #ifdef IMV_BACKEND_LIBRSVG
 RsvgHandle *imv_image_get_svg(const struct imv_image *image);
 #endif
-- 
2.43.0


